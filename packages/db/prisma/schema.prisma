generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "prisma"
}

model User {
  id          BigInt    @id @default(autoincrement())
  loginType   LoginType
  tgId        BigInt    @unique
  tgUsername  String?
  firstName   String?
  lastName    String?
  profileImg  String?
  isPremium   Boolean   @default(false)
  refCode     String    @unique
  referBy     BigInt?
  langCode    String?
  totalPoints BigInt    @default(0)
  extJson     Json?
  createBy    BigInt?
  createDt    DateTime  @default(now())
  modifyBy    BigInt?
  modifyDt    DateTime? @updatedAt
}

model UserAction {
  id                BigInt    @id @default(autoincrement())
  opTgId            BigInt
  opDisplayName     String?
  actionType        String
  selfReward        BigInt?
  targetTgId        BigInt?
  targetReward      BigInt?
  targetDisplayName String?
  extJson           Json?
  createBy          BigInt?
  createDt          DateTime  @default(now())
  modifyBy          BigInt?
  modifyDt          DateTime? @updatedAt

  @@index([opTgId])
}

model WalletInfo {
  id       BigInt     @id @default(autoincrement())
  tgId     BigInt
  chain    Blockchain
  network  Network
  address  String     @unique
  balance  BigInt?
  loginDt  DateTime   @default(now())
  extJson  Json?
  createBy BigInt?
  createDt DateTime   @default(now())
  modifyBy BigInt?
  modifyDt DateTime?  @updatedAt

  @@index([address])
}

model Category {
  id          BigInt                 @id @default(autoincrement())
  key         String                 @unique
  name        String                 @unique
  tagline     String
  description String?                @db.Text
  priority    Int                    @default(100)
  appsCount   Int                    @default(0)
  iconImg     Json?
  extJson     Json?
  deleted     Boolean                @default(false)
  createBy    BigInt?
  createDt    DateTime               @default(now())
  modifyBy    BigInt?
  modifyDt    DateTime?              @updatedAt
  projects    CategoriesOnProjects[]
}

model Project {
  id             BigInt                 @id @default(autoincrement())
  ownerTgId      BigInt
  name           String?
  tagline        String?
  description    String?                @db.Text
  langCodes      String?
  specialty      String?
  links          Json?
  tgChannels     Json?
  tgChats        Json?
  tgBots         Json?
  iconImg        Json?
  upvote         Int                    @default(1)
  rating         String?
  priority       Int                    @default(100)
  verified       Boolean                @default(false)
  cloutIndex     Int                    @default(1)
  updatedDateKey String
  promoted       Boolean                @default(false)
  status         ProjectStatus          @default(Draft)
  deleted        Boolean                @default(false)
  extJson        Json?
  createBy       BigInt?
  createDt       DateTime               @default(now())
  modifyBy       BigInt?
  modifyDt       DateTime?              @updatedAt
  categories     CategoriesOnProjects[]
}

model ParticipantHistory {
  id               BigInt    @id @default(autoincrement())
  projectId        BigInt
  targetKey        String
  updatedDateKey   String
  participantCount Int       @default(1)
  extJson          Json?
  createBy         BigInt?
  createDt         DateTime  @default(now())
  modifyBy         BigInt?
  modifyDt         DateTime? @updatedAt

  @@unique([projectId, targetKey, updatedDateKey])
}

model CloutIndex {
  id             BigInt    @id @default(autoincrement())
  projectId      BigInt
  updatedDateKey String
  userActivity   Int
  influence      Int
  community      Int
  innovation     Int
  Technical      Int
  Market         Int
  extJson        Json?
  createBy       BigInt?
  createDt       DateTime  @default(now())
  modifyBy       BigInt?
  modifyDt       DateTime? @updatedAt

  @@index([projectId])
}

model CategoriesOnProjects {
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  BigInt
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId BigInt
  createBy   String
  createDt   DateTime @default(now())

  @@id([projectId, categoryId])
  @@index([categoryId])
}

model ProjectVote {
  id        BigInt   @id @default(autoincrement())
  projectId BigInt
  voteBy    BigInt
  createBy  BigInt?
  createDt  DateTime @default(now())

  @@index([projectId])
  @@index([voteBy])
}

model NotcoinGoodTable {
  id        BigInt   @id @default(autoincrement())
  projectId BigInt
  entityId  String
  dateIndex String
  extJson   Json?
  createBy  BigInt?
  createDt  DateTime @default(now())

  @@unique([projectId, entityId, dateIndex])
}

model Image {
  id       BigInt        @id @default(autoincrement())
  scenario ImageScenario
  bindId   BigInt?
  url      String
  extJson  Json?
  createBy BigInt?
  createDt DateTime      @default(now())
}

// model Gem {
//   id        BigInt        @id @default(autoincrement())
//   ownerTgId BigInt
//   projectId BigInt?
//   name      String
//   type      GemType
//   upvote    Int           @default(1)
//   tagline   String?
//   rules     String?       @db.Text
//   deleted   Boolean       @default(false)
//   extJson   Json?
//   createBy  BigInt?
//   createDt  DateTime      @default(now())
//   modifyBy  BigInt?
//   modifyDt  DateTime?     @updatedAt
//   users     GemsOnUsers[]
//   tasks     Task[]
// }
//
// model GemsOnUsers {
//   user     User        @relation(fields: [userId], references: [id])
//   userId   BigInt
//   gem      Gem         @relation(fields: [gemId], references: [id])
//   gemId    BigInt
//   state    CommonState
//   extJson  Json?
//   createBy String
//   createDt DateTime    @default(now())
//
//   @@id([userId, gemId])
//   @@index([userId])
//   @@index([gemId])
// }
// //
// // model TasksOnUsers {
// //   user     User        @relation(fields: [userId], references: [id])
// //   userId   BigInt
// //   task     Task        @relation(fields: [taskId], references: [id])
// //   taskId   BigInt
// //   gemId    BigInt?
// //   state    CommonState
// //   extJson  Json?
// //   createBy String
// //   createDt DateTime    @default(now())
// //
// //   @@id([userId, taskId])
// //   @@index([userId])
// //   @@index([taskId])
// // }
// //
// // model GemVote {
// //   id       BigInt   @id @default(autoincrement())
// //   gemId    BigInt
// //   voteBy   BigInt
// //   createBy BigInt?
// //   createDt DateTime @default(now())
// //
// //   @@index([gemId])
// //   @@index([voteBy])
// // }
//
// model Task {
//   id       BigInt         @id @default(autoincrement())
//   type     TaskType
//   target   String
//   extJson  Json?
//   createBy BigInt?
//   createDt DateTime       @default(now())
//   modifyBy BigInt?
//   modifyDt DateTime?      @updatedAt
//   gem      Gem            @relation(fields: [gemId], references: [id])
//   gemId    BigInt
//   users    TasksOnUsers[]
//
//   @@index([gemId])
// }

//  ================== enums ==================

enum ProjectStatus {
  Draft
  Submited
  Pending
  Online
  Deleted
}

enum TaskType {
  GroupJoin
  ChannelJoin
  MiniAppOpen
  TwitterFollow
  TwitterReply
  TwitterLike
  TwitterRepost
  WebsiteOpen
  DiscordJoin
  WalletConnect
}

enum LoginType {
  TgAuth
  MiniApp
}

enum Blockchain {
  TON
  SOL
  ETH
}

enum Network {
  Mainnet
  Testnet
  Custom
}

enum ChatStatus {
  creator
  member
  administrator
  restricted
  left
  kicked
}

enum ImageScenario {
  Project
  Gem
  Matcher
  Newsletter
  Service
  Tool
  Other
}

//
// enum GemType {
//   // Bogo
//   Coupon
//   // Contests
//   Cashback
//   Discount
//   FreeTrial
//   // FlashSale
//   Giveaway
//   Groupon
//   Lottery
//   LoyaltyPoints
//   // MysteryGift
//   ReferralBonus
//   SpinTheWheel
//   Whitelist
//   Other
// }

//  ================== enums end ==================
